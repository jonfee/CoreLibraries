@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div id="myCarousel" class="carousel slide" data-ride="carousel" data-interval="6000">
    <script type="text/javascript">

        function stringToByte(str) {
            var bytes = new Array();
            var len, c;
            len = str.length;
            for (var i = 0; i < len; i++) {
                c = str.charCodeAt(i);
                if (c >= 0x010000 && c <= 0x10FFFF) {
                    bytes.push(((c >> 18) & 0x07) | 0xF0);
                    bytes.push(((c >> 12) & 0x3F) | 0x80);
                    bytes.push(((c >> 6) & 0x3F) | 0x80);
                    bytes.push((c & 0x3F) | 0x80);
                } else if (c >= 0x000800 && c <= 0x00FFFF) {
                    bytes.push(((c >> 12) & 0x0F) | 0xE0);
                    bytes.push(((c >> 6) & 0x3F) | 0x80);
                    bytes.push((c & 0x3F) | 0x80);
                } else if (c >= 0x000080 && c <= 0x0007FF) {
                    bytes.push(((c >> 6) & 0x1F) | 0xC0);
                    bytes.push((c & 0x3F) | 0x80);
                } else {
                    bytes.push(c & 0xFF);
                }
            }
            return bytes;


        }


        function byteToString(arr) {
            if (typeof arr === 'string') {
                return arr;
            }
            var str = '',
                _arr = arr;
            for (var i = 0; i < _arr.length; i++) {
                var one = _arr[i].toString(2),
                    v = one.match(/^1+?(?=0)/);
                if (v && one.length == 8) {
                    var bytesLength = v[0].length;
                    var store = _arr[i].toString(2).slice(7 - bytesLength);
                    for (var st = 1; st < bytesLength; st++) {
                        store += _arr[st + i].toString(2).slice(2);
                    }
                    str += String.fromCharCode(parseInt(store, 2));
                    i += bytesLength - 1;
                } else {
                    str += String.fromCharCode(_arr[i]);
                }
            }
            return str;
        }

        var ws = new WebSocket("ws://localhost:54928");
        ws.binaryType = "arraybuffer";
        console.log(ws);

        ws.onopen = (evt) => {
            console.log("connection open...");
        }
        ws.onmessage = (evt) => {
            var rst = "";
            if (typeof evt.data == "string") {
                rst = evt.data;
            } else {
                var reader = new FileReader();
                reader.onload = (evt) => {
                    if (evt.target.readyState == FileReader.DONE) {
                        var data = new Uint8Array(evt.target.result);
                        for (var i = 0; i < data.length; i++) {
                            rst += String.fromCharCode(data[i]);
                        }
                    }
                }
                reader.readAsArrayBuffer(evt.data);
            }
            console.log("Received Message:" + rst);
        }
        ws.onclose = (evt) => {
            console.log("Connection closed.");
        }

        var tm = setInterval(() => {
            if (ws.readyState == WebSocket.OPEN) {
                var txt = Math.random().toString();
                ws.send(txt);
                }
        }, 1000);

    </script>
</div>
