<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JF.DataBased</name>
    </assembly>
    <members>
        <member name="T:JF.DataBased.Context.DapperDbContext">
            <summary>
            使用Dapper做为ORM时的数据库上下文
            </summary>
        </member>
        <member name="M:JF.DataBased.Context.DapperDbContext.#ctor">
            <summary>
            实例化一个对象实例。
            </summary>
        </member>
        <member name="M:JF.DataBased.Context.DapperDbContext.#ctor(JF.DataBased.DbConnectOptions)">
            <summary>
            实例化一个对象实例，提供实例化参数信息。
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:JF.DataBased.Context.DapperDbContext.JF#DataBased#Context#IDbContext#Connection">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="T:JF.DataBased.Context.EFDbContext">
            <summary>
            使用EF做为ORM时的数据库上下文
            </summary>
        </member>
        <member name="M:JF.DataBased.Context.EFDbContext.#ctor">
            <summary>
            实例化一个对象实例。
            </summary>
        </member>
        <member name="M:JF.DataBased.Context.EFDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            实例化一个对象实例，提供实例化参数信息。
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:JF.DataBased.Context.EFDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{JF.DataBased.Context.EFDbContext})">
            <summary>
            实例化一个对象实例，提供实例化参数信息。
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:JF.DataBased.Context.EFDbContext.#ctor(JF.DataBased.DbConnectOptions)">
            <summary>
            实例化一个对象实例，提供实例化参数信息。
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:JF.DataBased.Context.EFDbContext.JF#DataBased#Context#IDbContext#Connection">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="T:JF.DataBased.Context.IDbContext">
            <summary>
            数据库上下文接口
            </summary>
        </member>
        <member name="P:JF.DataBased.Context.IDbContext.Connection">
            <summary>
            获取当前连接<see cref="T:System.Data.IDbConnection"/>对象
            </summary>
        </member>
        <member name="M:JF.DataBased.Context.IDbContext.SaveChanges(System.Boolean)">
            <summary>
            Saves all changes made in this context to the database.
            </summary>
            <param name="acceptAllChangesOnSuccess">
            Indicates whether Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges
            is called after the changes have been sent successfully to the database.
            </param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Context.IDbContext.SaveChanges">
            <summary>
            Saves all changes made in this context to the database.
            </summary>
            <returns>The number of state entries written to the database.</returns>
        </member>
        <member name="M:JF.DataBased.Context.IDbContext.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Asynchronously saves all changes made in this context to the database.
            </summary>
            <param name="acceptAllChangesOnSuccess">Indicates whether Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges
             is called after the changes have been sent successfully to the database.
            </param>
            <param name="cancellationToken">
            A System.Threading.CancellationToken to observe while waiting for the task to complete.
            </param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Context.IDbContext.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously saves all changes made in this context to the database.
            </summary>
            <param name="cancellationToken">
            A System.Threading.CancellationToken to observe while waiting for the task to
            complete.
            </param>
            <returns></returns>
        </member>
        <member name="T:JF.DataBased.Core.ConditionBuilder">
            <summary>
            脚本生成实体
            </summary>
        </member>
        <member name="F:JF.DataBased.Core.ConditionBuilder.withQuotationMarks">
            <summary>
            字段是否加引号
            </summary>
        </member>
        <member name="M:JF.DataBased.Core.ConditionBuilder.AddQuotationMarks(System.String)">
            <summary>
            加双引号
            </summary>
            <param name="str">字串</param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Core.ConditionBuilder.Build(System.Linq.Expressions.Expression)">
            <summary>
            执行生成
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:JF.DataBased.Core.ConditionBuilder.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            ConditionBuilder 并不支持生成Like操作，如 字符串的 StartsWith，Contains，EndsWith 并不能生成这样的SQL： Like ‘xxx%’, Like ‘%xxx%’ , Like ‘%xxx’ . 只要override VisitMethodCall 这个方法即可实现上述功能。
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Core.ConditionBuilder.GetLikeConnectorWords(JF.DataBased.DataBaseType)">
            <summary>
            获得like语句链接符
            </summary>
            <param name="databaseType"></param>
            <returns></returns>
        </member>
        <member name="P:JF.DataBased.Core.ConditionBuilder.DataBaseType">
            <summary>
            获取或者设置数据库类型
            </summary>
        </member>
        <member name="P:JF.DataBased.Core.ConditionBuilder.Condition">
            <summary>
            
            </summary>
        </member>
        <member name="P:JF.DataBased.Core.ConditionBuilder.Arguments">
            <summary>
            
            </summary>
        </member>
        <member name="P:JF.DataBased.Core.ConditionBuilder.WithQuotationMarks">
            <summary>
            字段是否加引号
            </summary>
        </member>
        <member name="M:JF.DataBased.Core.PartialEvaluator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:JF.DataBased.Core.PartialEvaluator.#ctor(System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            
            </summary>
            <param name="fnCanBeEvaluated"></param>
        </member>
        <member name="M:JF.DataBased.Core.PartialEvaluator.Eval(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Core.PartialEvaluator.Visit(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Core.PartialEvaluator.Evaluate(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Core.PartialEvaluator.CanBeEvaluatedLocally(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="T:JF.DataBased.Core.PartialEvaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="T:JF.DataBased.Core.SqlGenerate">
            <summary>
            SQL生成类
            </summary>
        </member>
        <member name="M:JF.DataBased.Core.SqlGenerate.GetWhereByLambda``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},JF.DataBased.DataBaseType)">
            <summary>
            生成SQL-Where语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">表达式</param>
            <param name="databaseType">数据类型（用于字段是否加引号）</param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Core.SqlGenerate.GetWithQuotationMarks(JF.DataBased.DataBaseType)">
            <summary>
            获取是否字段加双引号
            </summary>
            <param name="databaseType"></param>
            <returns></returns>
        </member>
        <member name="T:JF.DataBased.DataBaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="T:JF.DataBased.DbOptions">
            <summary>
            数据库信息配置参数
            </summary>
        </member>
        <member name="P:JF.DataBased.DbOptions.SqlType">
            <summary>
            数据库类型，枚举：<see cref="T:JF.DataBased.DataBaseType"/>
            </summary>
        </member>
        <member name="P:JF.DataBased.DbOptions.OrmType">
            <summary>
            ORM方式，枚举：<see cref="T:JF.DataBased.ORMType"/>
            </summary>
        </member>
        <member name="P:JF.DataBased.DbOptions.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="T:JF.DataBased.DbConnectOptions">
            <summary>
            数据库连接参数
            </summary>
        </member>
        <member name="P:JF.DataBased.DbConnectOptions.SqlType">
            <summary>
            数据库类型，枚举：<see cref="T:JF.DataBased.DataBaseType"/>
            </summary>
        </member>
        <member name="P:JF.DataBased.DbConnectOptions.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="M:JF.DataBased.DbConnectOptions.op_Implicit(JF.DataBased.DbOptions)~JF.DataBased.DbConnectOptions">
            <summary>
            将<see cref="T:JF.DataBased.DbOptions"/>类型隐式转换为新的<see cref="T:JF.DataBased.DbConnectOptions"/>对象实例并返回。
            </summary>
            <param name="option"></param>
        </member>
        <member name="T:JF.DataBased.ORMType">
            <summary>
            数据对象映射方式（ORM）
            </summary>
        </member>
        <member name="F:JF.DataBased.ORMType.EF">
            <summary>
            EntityFramework
            </summary>
        </member>
        <member name="F:JF.DataBased.ORMType.Dapper">
            <summary>
            Dapper
            </summary>
        </member>
        <member name="T:JF.DataBased.RepositoryExtensions">
            <summary>
            子仓服务扩展类
            </summary>
        </member>
        <member name="M:JF.DataBased.RepositoryExtensions.ConvertFor``2(JF.DataBased.Repository.IChildRepository{``0})">
            <summary>
            将<see cref="T:JF.DataBased.Repository.IChildRepository`1"/>对象转化为指定的类型。
            </summary>
            <typeparam name="TChildRepositoryResult"></typeparam>
            <typeparam name="TDataEntity"></typeparam>
            <param name="repository"></param>
            <returns></returns>
        </member>
        <member name="T:JF.DataBased.Repository.ChildRepositoryFacede`1">
            <summary>
            子仓外观类
            </summary>
            <typeparam name="TDbContext"></typeparam>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:JF.DataBased.Repository.ChildRepositoryFacede`1.ExecuteSqlCommand(System.String,System.Object[])">
            <summary>
            执行SQL命令
            </summary>
            <param name="sql"></param>
            <param name="paramters"></param>
            <returns></returns>
        </member>
        <member name="T:JF.DataBased.Repository.DapperChildRepositoryBase`1">
            <summary>
            使用了<see cref="T:JF.DataBased.Context.DapperDbContext"/>数据连接的子仓抽象基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JF.DataBased.Repository.DapperChildRepositoryBase`1.ExecuteSqlCommand(System.String,System.Object[])">
            <summary>
            执行SQL命令
            </summary>
            <param name="sql"></param>
            <param name="paramters"></param>
            <returns></returns>
        </member>
        <member name="T:JF.DataBased.Repository.DapperRepositoryBase">
            <summary>
            使用了<see cref="T:JF.DataBased.Context.DapperDbContext"/>数据连接的仓储基类。
            </summary>
        </member>
        <member name="M:JF.DataBased.Repository.DapperRepositoryBase.ExecuteSqlCommand(System.String,System.Object)">
            <summary>
            执行SQL命令
            </summary>
            <param name="sql"></param>
            <param name="paramters"></param>
            <returns></returns>
        </member>
        <member name="T:JF.DataBased.Repository.EFChildRepositoryBase`1">
            <summary>
            使用了<see cref="T:JF.DataBased.Context.EFDbContext"/>数据连接的子仓抽象基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JF.DataBased.Repository.EFChildRepositoryBase`1.ExecuteSqlCommand(System.String,System.Object[])">
            <summary>
            执行SQL命令
            </summary>
            <param name="sql"></param>
            <param name="paramters"></param>
            <returns></returns>
        </member>
        <member name="T:JF.DataBased.Repository.EFRepositoryBase">
            <summary>
            使用了<see cref="T:JF.DataBased.Context.EFDbContext"/>数据连接的仓储基类。
            </summary>
        </member>
        <member name="M:JF.DataBased.Repository.EFRepositoryBase.ExecuteSqlCommand(System.String,System.Object)">
            <summary>
            执行SQL命令
            </summary>
            <param name="sql"></param>
            <param name="paramters"></param>
            <returns></returns>
        </member>
        <member name="T:JF.DataBased.Repository.IChildRepository`1">
            <summary>
            子仓接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JF.DataBased.Repository.IChildRepository`1.All">
            <summary>
            获取当前指定类型的所有数据。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IChildRepository`1.Find(System.Object[])">
            <summary>
            根据主键获取实体数据。
            </summary>
            <param name="keyValues"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IChildRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件返回匹配条件的第一条数据。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IChildRepository`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            检测是否存在符合条件的数据。
            </summary>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IChildRepository`1.Insert(`0)">
            <summary>
            插入一条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:JF.DataBased.Repository.IChildRepository`1.Update(`0)">
            <summary>
            更新一条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:JF.DataBased.Repository.IChildRepository`1.Delete(`0)">
            <summary>
            删除指定数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:JF.DataBased.Repository.IChildRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            按条件删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditions"></param>
        </member>
        <member name="M:JF.DataBased.Repository.IChildRepository`1.Search(System.String,System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="paramters"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IChildRepository`1.Search(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件查找
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IChildRepository`1.Search``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32,System.Int32@)">
            <summary>
            根据条件分页查找
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="S"></typeparam>
            <param name="conditions"></param>
            <param name="orderBy"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IChildRepository`1.ExecuteSqlCommand(System.String)">
            <summary>
            执行SQL命令
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IChildRepository`1.ExecuteSqlCommand(System.String,System.Object[])">
            <summary>
            执行SQL命令
            </summary>
            <param name="sql"></param>
            <param name="paramters"></param>
            <returns></returns>
        </member>
        <member name="T:JF.DataBased.Repository.IRepository">
            <summary>
            主仓储服务接口。
            </summary>
        </member>
        <member name="P:JF.DataBased.Repository.IRepository.DbContext">
            <summary>
            数据库上下文对象
            </summary>
        </member>
        <member name="M:JF.DataBased.Repository.IRepository.All``1">
            <summary>
            获取当前指定类型的所有数据。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IRepository.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件返回匹配条件的第一条数据。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IRepository.Exists``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            检测是否存在符合条件的数据。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IRepository.Insert``1(``0)">
            <summary>
            插入一条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:JF.DataBased.Repository.IRepository.Update``1(``0)">
            <summary>
            更新一条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:JF.DataBased.Repository.IRepository.Delete``1(``0)">
            <summary>
            删除指定数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:JF.DataBased.Repository.IRepository.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            按条件删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditions"></param>
        </member>
        <member name="M:JF.DataBased.Repository.IRepository.Find``1(System.Object[])">
            <summary>
            根据主键获取实体数据。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyValues"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IRepository.Search``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查找
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IRepository.Search``1(System.String,System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="paramters"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IRepository.Search``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,System.Int32@)">
            <summary>
            根据条件分页查找
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="S"></typeparam>
            <param name="conditions"></param>
            <param name="orderBy"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IRepository.Query``1(System.String,System.Object)">
            <summary>
            查询并返回自定义类型结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="paramters"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IRepository.ExecuteSqlCommand(System.String)">
            <summary>
            执行SQL命令
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IRepository.ExecuteSqlCommand(System.String,System.Object)">
            <summary>
            执行SQL命令
            </summary>
            <param name="sql"></param>
            <param name="paramters"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IRepository.SaveChanges">
            <summary>
            保存更改
            </summary>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IRepository.GetChild``2">
            <summary>
            获取实际的子仓类实例。
            </summary>
            <typeparam name="TDataEntity"></typeparam>
            <typeparam name="TChildRepositoryResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IRepository.GetChild``1">
            <summary>
            获取子仓
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.IRepository.TryGetChild``1(JF.DataBased.Repository.IChildRepository{``0}@)">
            <summary>
            获取子仓。
            建议使用享元模式实现子仓。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:JF.DataBased.Repository.RepositoryBase`1.OrmType">
            <summary>
            ORM类型
            </summary>
        </member>
        <member name="P:JF.DataBased.Repository.RepositoryBase`1.DbContext">
            <summary>
            上下文对象。
            </summary>
        </member>
        <member name="M:JF.DataBased.Repository.RepositoryBase`1.GetChild``2">
            <summary>
            获取实际的子仓类实例。
            </summary>
            <typeparam name="TDataEntity"></typeparam>
            <typeparam name="TChildRepositoryResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.RepositoryBase`1.GetChild``1">
            <summary>
            获取指定的子仓。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.RepositoryBase`1.TryGetChild``1(JF.DataBased.Repository.IChildRepository{``0}@)">
            <summary>
            获取指定的子仓
            </summary>
            <typeparam name="T"></typeparam>
            <param name="repository"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.RepositoryBase`1.CreateChildRepository``1">
            <summary>
            创建一个默认子仓实例。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:JF.DataBased.Repository.RepositoryFacede">
            <summary>
            主仓外观类
            </summary>
            <typeparam name="TDbContext"></typeparam>
        </member>
        <member name="M:JF.DataBased.Repository.RepositoryFacede.ExecuteSqlCommand(System.String,System.Object)">
            <summary>
            执行SQL命令
            </summary>
            <param name="sql"></param>
            <param name="paramters"></param>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.Repository.RepositoryFacede.GetChild``2">
            <summary>
            获取实际的子仓类实例。
            </summary>
            <typeparam name="TDataEntity"></typeparam>
            <typeparam name="TChildRepositoryResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:JF.DataBased.IUnitOfWork">
            <summary>
            工作单元接口
            </summary>
        </member>
        <member name="P:JF.DataBased.IUnitOfWork.AddedEntities">
            <summary>
            需要新增的数据对象
            </summary>
        </member>
        <member name="P:JF.DataBased.IUnitOfWork.UpdatedEntities">
            <summary>
            需要更新的数据对象
            </summary>
        </member>
        <member name="P:JF.DataBased.IUnitOfWork.DeletedEntities">
            <summary>
            需要删除的数据对象
            </summary>
        </member>
        <member name="P:JF.DataBased.IUnitOfWork.SqlCommands">
            <summary>
            需要执行的SQL命令行
            </summary>
        </member>
        <member name="M:JF.DataBased.IUnitOfWork.RegisteAdded``1(``0,JF.DataBased.Repository.IRepository)">
            <summary>
            注册一个新的数据对象插入。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <param name="repository"></param>
        </member>
        <member name="M:JF.DataBased.IUnitOfWork.RegisteUpdated``1(``0,JF.DataBased.Repository.IRepository)">
            <summary>
            注册一个新的数据对象更新。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <param name="repository"></param>
        </member>
        <member name="M:JF.DataBased.IUnitOfWork.RegisteDeleted``1(``0,JF.DataBased.Repository.IRepository)">
            <summary>
            注册一个新的数据对象删除。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <param name="repository"></param>
        </member>
        <member name="M:JF.DataBased.IUnitOfWork.RegisteCommand(System.String,JF.DataBased.Repository.IRepository)">
            <summary>
            注册一个新的SQL命令。
            </summary>
            <param name="sql"></param>
            <param name="repository"></param>
        </member>
        <member name="M:JF.DataBased.IUnitOfWork.Commit(System.Action,System.Int32)">
            <summary>
            提交事务，
            并提供一个事务执行成功后的回调程序。
            </summary>
            <remarks>
            MySql目前版本支持同一个连接字符串内多个连接实例的事务（且一个实例SaveChanges()后，必须释放，否则有并发问题。），
            不支持不同连接字符串以及不同数据库之间的事务。
            </remarks>
            <param name="callback">事务执行成功后的回调程序。</param>
            <param name="timeoutSeconds">事务超时时间(单位：秒)。</param>
        </member>
        <member name="T:JF.DataBased.UnitOfWorkBase">
            <summary>
            工作单元抽象基类
            </summary>
        </member>
        <member name="F:JF.DataBased.UnitOfWorkBase.repositories">
            <summary>
            仓储服务集合
            </summary>
        </member>
        <member name="P:JF.DataBased.UnitOfWorkBase.DefaultRepository">
            <summary>
            获取默认且唯一的仓储服务,
            如果工作单元中存在多们仓储服务时，将返回NULL。
            </summary>
        </member>
        <member name="P:JF.DataBased.UnitOfWorkBase.AddedEntities">
            <summary>
            需要新增的数据对象
            </summary>
        </member>
        <member name="P:JF.DataBased.UnitOfWorkBase.UpdatedEntities">
            <summary>
            需要更新的数据对象
            </summary>
        </member>
        <member name="P:JF.DataBased.UnitOfWorkBase.DeletedEntities">
            <summary>
            需要删除的数据对象
            </summary>
        </member>
        <member name="P:JF.DataBased.UnitOfWorkBase.SqlCommands">
            <summary>
            需要执行的SQL命令行
            </summary>
        </member>
        <member name="P:JF.DataBased.UnitOfWorkBase.PendingNumber">
            <summary>
            当前工作单元中待处理的数据数量
            </summary>
        </member>
        <member name="M:JF.DataBased.UnitOfWorkBase.#ctor">
            <summary>
            初始化一个<see cref="T:JF.DataBased.UnitOfWorkBase"/>对象实例。
            </summary>
        </member>
        <member name="M:JF.DataBased.UnitOfWorkBase.#ctor(JF.DataBased.Repository.IRepository)">
            <summary>
            初始化一个<see cref="T:JF.DataBased.UnitOfWorkBase"/>对象实例。
            </summary>
            <param name="repository">仓储实例对象。</param>
        </member>
        <member name="M:JF.DataBased.UnitOfWorkBase.RegisteAdded``1(``0)">
            <summary>
            注册一个新的数据对象插入。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:JF.DataBased.UnitOfWorkBase.RegisteUpdated``1(``0)">
            <summary>
            注册一个新的数据对象更新。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:JF.DataBased.UnitOfWorkBase.RegisteDeleted``1(``0)">
            <summary>
            注册一个新的数据对象删除。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:JF.DataBased.UnitOfWorkBase.RegisteCommand(System.String)">
            <summary>
            注册一个新的SQL命令。
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:JF.DataBased.UnitOfWorkBase.AddRepository``1(``0)">
            <summary>
            添加仓储服务
            </summary>
            <typeparam name="TRepository"></typeparam>
            <param name="repository"></param>
        </member>
        <member name="M:JF.DataBased.UnitOfWorkBase.GetRepository``1">
            <summary>
            获取仓储服务对象。
            </summary>
            <typeparam name="TRepository"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JF.DataBased.UnitOfWorkBase.Commit(System.Action,System.Int32)">
            <summary>
            提交事务。
            提供一个事务执行成功后的回调程序。
            </summary>
            <remarks>
            MySql目前版本支持同一个连接字符串内多个连接实例的事务（且一个实例SaveChanges()后，必须释放，否则有并发问题。），
            不支持不同连接字符串以及不同数据库之间的事务。
            </remarks>
            <param name="callback">事务执行成功后的回调程序。</param>
            <param name="timeoutSeconds">事务超时时间(单位：秒)。</param>
        </member>
        <member name="M:JF.DataBased.UnitOfWorkBase.ClearWorks">
            <summary>
            清空当前的工作项
            </summary>
        </member>
        <member name="M:JF.DataBased.UnitOfWorkBase.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Dapper.Database`1">
            <summary>
            针对于Dapper的一个数据库操作类。
            </summary>
            <typeparam name="TDatabase"></typeparam>
        </member>
        <member name="P:Dapper.Database`1.Connection">
            <summary>
            IDbConnection
            </summary>
        </member>
        <member name="M:Dapper.Database`1.GetDbConnection">
            <summary>
            获取<see cref="T:System.Data.IDbConnection"/>对象实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database`1.Set``1">
            <summary>
            获取一个Table表对象
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database`1.CommitTransaction">
            <summary>
            事务提交
            </summary>
        </member>
        <member name="M:Dapper.Database`1.RollbackTransaction">
            <summary>
            事务回滚
            </summary>
        </member>
        <member name="M:Dapper.Database`1.DbSet`1.Insert(`1,System.Boolean)">
            <summary>
            插入数据
            </summary>
            <param name="entity"></param>
            <param name="trans">就否加入事务处理，默认为True，如果想立即执行，请使用False。</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database`1.DbSet`1.ResolveOrderByTsql``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Boolean)">
            <summary>
            解析Order by语句
            </summary>
            <param name="expression"></param>
            <param name="asc">是否为升序，true为升序，false为降序</param>
            <returns></returns>
        </member>
        <member name="T:Dapper.DbContext">
            <summary>
            使用Dapper作为ORM时的数据库上下文
            </summary>
        </member>
        <member name="M:Dapper.DbContext.#ctor">
            <summary>
            实例化一个对象实例。
            </summary>
        </member>
        <member name="M:Dapper.DbContext.#ctor(JF.DataBased.DbConnectOptions)">
            <summary>
            实例化一个对象实例，提供实例化参数信息。
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Dapper.DbContext.Database">
            <summary>
            Provides access to database related information and operations for this context.
            </summary>
        </member>
        <member name="M:Dapper.DbContext.OnConfiguring(JF.DataBased.DbConnectOptions)">
            <summary>
            加载配置
            </summary>
        </member>
        <member name="M:Dapper.DbContext.TryExecute(System.Object,System.String)">
            <summary>
            执行方法
            </summary>
            <param name="entity"></param>
            <param name="methodName">执行方法，仅限：Insert,Update,Delete</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.FallBackTypeMapper.FindExplicitConstructor">
            <summary>
            Returns a constructor which should *always* be used.
            Parameters will be default values, nulls for reference types and zero'd for value types.
            Use this class to force object creation away from parameterless constructors you don't control.
            </summary>
        </member>
        <member name="T:Dapper.TypeMapper">
            <summary>
            Type Mapper
            </summary>
        </member>
        <member name="M:Dapper.TypeMapper.InjectToSqlMapper``1">
            <summary>
            注入到Dapper.SqlMapper
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dapper.TypeMapper.InjectToSqlMapper(System.Type)">
            <summary>
            注入到Dapper.SqlMapper
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Dapper.TypeMapper.Initialize(System.Reflection.Assembly,System.String)">
            <summary>
            将程序集中对应的类型注入到Dapper.SqlMapper，以用于Query查询映射。
            </summary>
            <param name="assembly"></param>
            <param name="namespaceStart"></param>
        </member>
    </members>
</doc>
