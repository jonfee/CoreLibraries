<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JF.EFContextBased</name>
    </assembly>
    <members>
        <member name="T:JF.EFContextBased.JFDbContext">
            <summary>
            AMS默认数据上下文
            </summary>
        </member>
        <member name="T:JF.EFContextBased.DbOptions">
            <summary>
            数据库连接配置参数
            </summary>
        </member>
        <member name="P:JF.EFContextBased.DbOptions.SqlType">
            <summary>
            数据库类型，枚举：<see cref="T:JF.EFContextBased.EnumSqlType"/>
            </summary>
        </member>
        <member name="P:JF.EFContextBased.DbOptions.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="T:JF.EFContextBased.EnumSqlType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:JF.EFContextBased.EnumSqlType.SqlServer">
            <summary>
            MSSQL
            </summary>
        </member>
        <member name="F:JF.EFContextBased.EnumSqlType.MySql">
            <summary>
            MySQL
            </summary>
        </member>
        <member name="T:JF.EFContextBased.RepositoryExtensions">
            <summary>
            子仓服务扩展类
            </summary>
        </member>
        <member name="M:JF.EFContextBased.RepositoryExtensions.ConvertFor``2(JF.EFContextBased.IChildRepository{``0})">
            <summary>
            将<see cref="T:JF.EFContextBased.IChildRepository`1"/>对象转化为指定的类型。
            </summary>
            <typeparam name="TChildRepositoryResult"></typeparam>
            <typeparam name="TDataEntity"></typeparam>
            <param name="repository"></param>
            <returns></returns>
        </member>
        <member name="T:JF.EFContextBased.ChildRepositoryBase`1">
            <summary>
            子仓抽象基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:JF.EFContextBased.IChildRepository`1">
            <summary>
            子仓接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JF.EFContextBased.IChildRepository`1.All">
            <summary>
            获取当前指定类型的所有数据。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JF.EFContextBased.IChildRepository`1.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件返回匹配条件的第一条数据。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:JF.EFContextBased.IChildRepository`1.Insert(`0)">
            <summary>
            插入一条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:JF.EFContextBased.IChildRepository`1.Update(`0)">
            <summary>
            更新一条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:JF.EFContextBased.IChildRepository`1.Delete(`0)">
            <summary>
            删除指定数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:JF.EFContextBased.IChildRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            按条件删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditions"></param>
        </member>
        <member name="M:JF.EFContextBased.IChildRepository`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件查找
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:JF.EFContextBased.IChildRepository`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32,System.Int32@)">
            <summary>
            根据条件分页查找
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="S"></typeparam>
            <param name="conditions"></param>
            <param name="orderBy"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <returns></returns>
        </member>
        <member name="M:JF.EFContextBased.IChildRepository`1.FromSql(System.String)">
            <summary>
            根据SQL命令查找
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:JF.EFContextBased.IChildRepository`1.ExecuteSqlCommand(System.String)">
            <summary>
            执行SQL命令
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="T:JF.EFContextBased.IRepository">
            <summary>
            主仓储服务接口。
            </summary>
        </member>
        <member name="P:JF.EFContextBased.IRepository.DbContext">
            <summary>
            数据库上下文对象
            </summary>
        </member>
        <member name="M:JF.EFContextBased.IRepository.All``1">
            <summary>
            获取当前指定类型的所有数据。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JF.EFContextBased.IRepository.Get``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件返回匹配条件的第一条数据。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:JF.EFContextBased.IRepository.Insert``1(``0)">
            <summary>
            插入一条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:JF.EFContextBased.IRepository.Update``1(``0)">
            <summary>
            更新一条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:JF.EFContextBased.IRepository.Delete``1(``0)">
            <summary>
            删除指定数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:JF.EFContextBased.IRepository.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            按条件删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditions"></param>
        </member>
        <member name="M:JF.EFContextBased.IRepository.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件查找
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="M:JF.EFContextBased.IRepository.Find``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,System.Int32@)">
            <summary>
            根据条件分页查找
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="S"></typeparam>
            <param name="conditions"></param>
            <param name="orderBy"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="totalCount"></param>
            <returns></returns>
        </member>
        <member name="M:JF.EFContextBased.IRepository.FromSql``1(System.String)">
            <summary>
            根据SQL命令查找
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:JF.EFContextBased.IRepository.ExecuteSqlCommand(System.String)">
            <summary>
            执行SQL命令
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:JF.EFContextBased.IRepository.GetChild``2">
            <summary>
            获取实际的子仓类实例。
            </summary>
            <typeparam name="TDataEntity"></typeparam>
            <typeparam name="TChildRepositoryResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JF.EFContextBased.IRepository.GetChild``1">
            <summary>
            获取子仓
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JF.EFContextBased.IRepository.TryGetChild``1(JF.EFContextBased.IChildRepository{``0}@)">
            <summary>
            获取子仓。
            建议使用享元模式实现子仓。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:JF.EFContextBased.RepositoryBase">
            <summary>
            仓储基类。
            </summary>
        </member>
        <member name="P:JF.EFContextBased.RepositoryBase.DbContext">
            <summary>
            上下文对象。
            </summary>
        </member>
        <member name="M:JF.EFContextBased.RepositoryBase.GetChild``2">
            <summary>
            获取实际的子仓类实例。
            </summary>
            <typeparam name="TDataEntity"></typeparam>
            <typeparam name="TChildRepositoryResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JF.EFContextBased.RepositoryBase.GetChild``1">
            <summary>
            获取指定的子仓。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JF.EFContextBased.RepositoryBase.TryGetChild``1(JF.EFContextBased.IChildRepository{``0}@)">
            <summary>
            获取指定的子仓
            </summary>
            <typeparam name="T"></typeparam>
            <param name="repository"></param>
            <returns></returns>
        </member>
        <member name="M:JF.EFContextBased.RepositoryBase.CreateChildRepository``1">
            <summary>
            创建一个默认子仓实例。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:JF.EFContextBased.IUnitOfWork">
            <summary>
            工作单元接口
            </summary>
        </member>
        <member name="P:JF.EFContextBased.IUnitOfWork.AddedEntities">
            <summary>
            需要新增的数据对象
            </summary>
        </member>
        <member name="P:JF.EFContextBased.IUnitOfWork.UpdatedEntities">
            <summary>
            需要更新的数据对象
            </summary>
        </member>
        <member name="P:JF.EFContextBased.IUnitOfWork.DeletedEntities">
            <summary>
            需要删除的数据对象
            </summary>
        </member>
        <member name="P:JF.EFContextBased.IUnitOfWork.SqlCommands">
            <summary>
            需要执行的SQL命令行
            </summary>
        </member>
        <member name="M:JF.EFContextBased.IUnitOfWork.RegisteAdded``1(``0,JF.EFContextBased.IRepository)">
            <summary>
            注册一个新的数据对象插入。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <param name="repository"></param>
        </member>
        <member name="M:JF.EFContextBased.IUnitOfWork.RegisteUpdated``1(``0,JF.EFContextBased.IRepository)">
            <summary>
            注册一个新的数据对象更新。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <param name="repository"></param>
        </member>
        <member name="M:JF.EFContextBased.IUnitOfWork.RegisteDeleted``1(``0,JF.EFContextBased.IRepository)">
            <summary>
            注册一个新的数据对象删除。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <param name="repository"></param>
        </member>
        <member name="M:JF.EFContextBased.IUnitOfWork.RegisteCommand(System.String,JF.EFContextBased.IRepository)">
            <summary>
            注册一个新的SQL命令。
            </summary>
            <param name="sql"></param>
            <param name="repository"></param>
        </member>
        <member name="M:JF.EFContextBased.IUnitOfWork.Commit(System.Action,System.Int32)">
            <summary>
            提交事务，
            并提供一个事务执行成功后的回调程序。
            </summary>
            <remarks>
            MySql目前版本支持同一个连接字符串内多个连接实例的事务（且一个实例SaveChanges()后，必须释放，否则有并发问题。），
            不支持不同连接字符串以及不同数据库之间的事务。
            </remarks>
            <param name="callback">事务执行成功后的回调程序。</param>
            <param name="timeoutSeconds">事务超时时间(单位：秒)。</param>
        </member>
        <member name="T:JF.EFContextBased.UnitOfWorkBase">
            <summary>
            工作单元抽象基类
            </summary>
        </member>
        <member name="F:JF.EFContextBased.UnitOfWorkBase.repositories">
            <summary>
            仓储服务集合
            </summary>
        </member>
        <member name="P:JF.EFContextBased.UnitOfWorkBase.DefaultRepository">
            <summary>
            获取默认且唯一的仓储服务,
            如果工作单元中存在多们仓储服务时，将返回NULL。
            </summary>
        </member>
        <member name="P:JF.EFContextBased.UnitOfWorkBase.AddedEntities">
            <summary>
            需要新增的数据对象
            </summary>
        </member>
        <member name="P:JF.EFContextBased.UnitOfWorkBase.UpdatedEntities">
            <summary>
            需要更新的数据对象
            </summary>
        </member>
        <member name="P:JF.EFContextBased.UnitOfWorkBase.DeletedEntities">
            <summary>
            需要删除的数据对象
            </summary>
        </member>
        <member name="P:JF.EFContextBased.UnitOfWorkBase.SqlCommands">
            <summary>
            需要执行的SQL命令行
            </summary>
        </member>
        <member name="P:JF.EFContextBased.UnitOfWorkBase.PendingNumber">
            <summary>
            当前工作单元中待处理的数据数量
            </summary>
        </member>
        <member name="M:JF.EFContextBased.UnitOfWorkBase.#ctor">
            <summary>
            初始化一个<see cref="T:JF.EFContextBased.UnitOfWorkBase"/>对象实例。
            </summary>
        </member>
        <member name="M:JF.EFContextBased.UnitOfWorkBase.#ctor(JF.EFContextBased.IRepository)">
            <summary>
            初始化一个<see cref="T:JF.EFContextBased.UnitOfWorkBase"/>对象实例。
            </summary>
            <param name="repository">仓储实例对象。</param>
        </member>
        <member name="M:JF.EFContextBased.UnitOfWorkBase.RegisteAdded``1(``0)">
            <summary>
            注册一个新的数据对象插入。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:JF.EFContextBased.UnitOfWorkBase.RegisteUpdated``1(``0)">
            <summary>
            注册一个新的数据对象更新。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:JF.EFContextBased.UnitOfWorkBase.RegisteDeleted``1(``0)">
            <summary>
            注册一个新的数据对象删除。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:JF.EFContextBased.UnitOfWorkBase.RegisteCommand(System.String)">
            <summary>
            注册一个新的SQL命令。
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:JF.EFContextBased.UnitOfWorkBase.AddRepository``1(``0)">
            <summary>
            添加仓储服务
            </summary>
            <typeparam name="TRepository"></typeparam>
            <param name="repository"></param>
        </member>
        <member name="M:JF.EFContextBased.UnitOfWorkBase.GetRepository``1">
            <summary>
            获取仓储服务对象。
            </summary>
            <typeparam name="TRepository"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JF.EFContextBased.UnitOfWorkBase.Commit(System.Action,System.Int32)">
            <summary>
            提交事务。
            提供一个事务执行成功后的回调程序。
            </summary>
            <remarks>
            MySql目前版本支持同一个连接字符串内多个连接实例的事务（且一个实例SaveChanges()后，必须释放，否则有并发问题。），
            不支持不同连接字符串以及不同数据库之间的事务。
            </remarks>
            <param name="callback">事务执行成功后的回调程序。</param>
            <param name="timeoutSeconds">事务超时时间(单位：秒)。</param>
        </member>
        <member name="M:JF.EFContextBased.UnitOfWorkBase.ClearWorks">
            <summary>
            清空当前的工作项
            </summary>
        </member>
    </members>
</doc>
